%% Import data from text file.
% Script for importing data from the following text file:
%
%    /media/andrew/storage/Nock_Reward_Study/Behavioral_Data/RWDR1001_Baseline/rwdr1001_Baseline_1b.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script. (Or just l2code and utilize this
% script with some creative shenanigans).

% Auto-generated by MATLAB on 2016/01/06 13:50:56
% Edited shortly thereafter by leaps and bounds with tears, fears, hopes, and dreams.
% Serger 2016
% Now with 85% less fail! - 1/6
% Now with 75% more fail! - 1/7
% Now with 90% less fail! - 1/10
% Now with 100% less fail! - 1/16
% Please never try to edit this code. Terrible things will be smitten upon
% thee who renders these words worthless. - Serger 1.16


% User Added Vars
% Subjects must be ordered the same in this variable as they are in the
% subStimSummary file allocated below. THIS IS EXTREMELY IMPORTANT! 
% LIKE ACTUALLY IMPORTANT! THIS MEANS EVERY SUBJECT EVERY TIME
% IF YOU'RE TRYING TO ADD SUBJECTS AND DON'T ALIGN THE SUBS VARIABLE AND THE EXCEL SHEET
% ALL HELL BREAKS LOOSE AND YOUR DATA SUCKS AND YOUR FRIENDS LEAVE YOU AND THE WORLD ENDS. - AS
subs={'1001','1002','1003','1004','1005','1006','1007','1009','1010','1011','1012','1013' ...
    '1014','1016','1017','1018','1019','1021','1022','1024','1025', ...
    '1027','1028','1029','1030','1031','1032','1033','1034','1035','1037'};

%stimSeq={'AG','AH','BG','BH','CE','CF','DE','DF'}; % A, B contain 1/2 pre. C, D contain 3/4 pre.
presType={'1a','1b','2a','2b','3a','3b','4a','4b'};
time={'Baseline','EOT','EOT12','EOT24'};
baseDir=('/media/andrew/storage/Nock_Reward_Study/Behavioral_Data/');

% Organized for viewing to set up PT if statements (circa line 275): Now just taking up
% space! - AS 1/7/16
%conds1={'NONFOOD','LOCAL','NONFOOD','HICAL','NONFOOD','LOCAL','NONFOOD','HICAL'};
%conds2={'LOCAL','NONFOOD','HICAL','NONFOOD','LOCAL','NONFOOD','HICAL','NONFOOD'};
%conds3={'HICAL','NONFOOD','LOCAL','NONFOOD','HICAL','NONFOOD','LOCAL','NONFOOD'};
%conds4={'NONFOOD','HICAL','NONFOOD','LOCAL','NONFOOD','HICAL','NONFOOD','LOCAL'};
%conds5={'NONFOOD','LOCAL','NONFOOD','HICAL','NONFOOD','LOCAL','NONFOOD','HICAL'};
%conds6={'LOCAL','NONFOOD','HICAL','NONFOOD','LOCAL','NONFOOD','HICAL','NONFOOD'};
%conds7={'HICAL','NONFOOD','LOCAL','NONFOOD','HICAL','NONFOOD','LOCAL','NONFOOD'};
%conds8={'NONFOOD','HICAL','NONFOOD','LOCAL','NONFOOD','HICAL','NONFOOD','LOCAL'};

%

cd(baseDir)

[~, ~, subStimSummary] = xlsread('/media/andrew/storage/Nock_Reward_Study/Behavioral_Data/subStimSummary.xlsx','Sheet1');
subStimSummary = subStimSummary(2:end,2:end);
subStimSummary(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),subStimSummary)) = {''};


% A,B always used with 1,2 as premeal. C,D always used with 3,4 as premeal.
subStimSummary=strrep(subStimSummary,'A','Pre');
subStimSummary=strrep(subStimSummary,'B','Pre');
subStimSummary=strrep(subStimSummary,'C','Post'); % This will make my head spin, as these post-labels are actually pre.
subStimSummary=strrep(subStimSummary,'D','Post'); % See above... / DEAL WITH IT

for s=1:numel(subs)
    
    for t=1:numel(time)
        
        cd(baseDir)
        %Get to current sub + time Directory
        path=([baseDir,'RWDR',subs{s},'_',time{t},'/']);
        if ~exist(path,'dir')
           DNE{s,t}=[subs{s},time{t}];
           continue
        end
        disp(path)
        cd(path)
            
        for pt=1:numel(presType)


        % Initialize variables.
        filename=(['rwdr',subs{s},'_',time{t},'_',presType{pt},'.txt']);
        delimiter = '\t';

        if exist(filename,'file')

        % set formatSpec to dataType1
        formatSpec = '%*s%s%*s%*s%*s%*s%*s%*s%*s%s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%s%[^\n\r]';

        % Open the text file.
        fileID = fopen(filename,'r','n','UTF16-LE');
        % Skip the BOM (Byte Order Mark).
        fseek(fileID, 2, 'bof');

        % Read columns of data according to format string.
        % This call is based on the structure of the file used to generate this
        % code. If an error occurs for a different file, try regenerating the code
        % from the Import Tool.
        dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);
        
        if strcmp(dataArray{1,2}{2,1},'RandomSeed')
            
            altFiles{s,t,pt}={subs{s},time{t},presType{pt}}; % For checking things later
            
            clearvars formatSpec
            
            % Redelegate file
            filename=(['rwdr',subs{s},'_',time{t},'_',presType{pt},'.txt']);
            delimiter = '\t';
            
            % set formatSpec to dataType2
            formatSpec = '%*s%s%*s%*s%*s%*s%*s%*s%s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%s%[^\n\r]';

            % Draft fileID a second time
            fileID = fopen(filename,'r','n','UTF16-LE');
            % Skip the BOM (Byte Order Mark).
            fseek(fileID, 2, 'bof');
                        
            % Populate new dataArray with correct data
            dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

            % Close the text file.
            fclose(fileID);

            % Convert the contents of columns containing numeric strings to numbers.
            % Replace non-numeric strings with NaN.
            raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
            for col=1:length(dataArray)-1
                raw(1:length(dataArray{col}),col) = dataArray{col};
            end
            numericData = NaN(size(dataArray{1},1),size(dataArray,2));

            for col=[1,2]
                % Converts strings in the input cell array to numbers. Replaced non-numeric
                % strings with NaN.
                rawData = dataArray{col};
                for row=1:size(rawData, 1);
                    % Create a regular expression to detect and remove non-numeric prefixes and
                    % suffixes.
                    regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
                    try
                        result = regexp(rawData{row}, regexstr, 'names');
                        numbers = result.numbers;
            
                        % Detected commas in non-thousand locations.
                        invalidThousandsSeparator = false;
                        if any(numbers==',');
                            thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                            if isempty(regexp(thousandsRegExp, ',', 'once'));
                                numbers = NaN;
                                invalidThousandsSeparator = true;
                            end
                        end
                        % Convert numeric strings to numbers.
                        if ~invalidThousandsSeparator;
                            numbers = textscan(strrep(numbers, ',', ''), '%f');
                            numericData(row, col) = numbers{1};
                            raw{row, col} = numbers{1};
                        end
                    catch me
                    end
                end
            end


               % Split data into numeric and cell columns.
               rawNumericColumns = raw(:, [1,2]);
               rawCellColumns = raw(:, [3,4]);


               % Replace non-numeric cells with NaN
               R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
               rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

               % Allocate imported array to column variable names
               Subject = cell2mat(rawNumericColumns(:, 1));
               InitLagOnsetTime = cell2mat(rawNumericColumns(:, 2));
               Condition = rawCellColumns(:, 1);
               SDSlideOnsetTime = rawCellColumns(:, 2);

               % Clear temporary variables
               clearvars filename delimiter formatSpec fileID dataArray ans raw col row regexstr result numbers invalidThousandsSeparator thousandsRegExp me R; %rawData rawNumericColumns rawCellColumns numericData
                    
          
        else % If strcmp==0, do this!

        % Close the text file.
        fclose(fileID);

        % Convert the contents of columns containing numeric strings to numbers.
        % Replace non-numeric strings with NaN.
        raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
            for col=1:length(dataArray)-1
                raw(1:length(dataArray{col}),col) = dataArray{col};
            end
        numericData = NaN(size(dataArray{1},1),size(dataArray,2));

            for col=[1,2]
                % Converts strings in the input cell array to numbers. Replaced non-numeric
                % strings with NaN.
                rawData = dataArray{col};
                    for row=1:size(rawData, 1);
                        % Create a regular expression to detect and remove non-numeric prefixes and
                        % suffixes.
                    regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
                    try
                    result = regexp(rawData{row}, regexstr, 'names');
                    numbers = result.numbers;
            
                    % Detected commas in non-thousand locations.
                    invalidThousandsSeparator = false;
                        if any(numbers==',');
                            thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                            if isempty(regexp(thousandsRegExp, ',', 'once'));
                                numbers = NaN;
                                invalidThousandsSeparator = true;
                            end
                        end
                    % Convert numeric strings to numbers.
                        if ~invalidThousandsSeparator;
                            numbers = textscan(strrep(numbers, ',', ''), '%f');
                            numericData(row, col) = numbers{1};
                            raw{row, col} = numbers{1};
                        end
                    catch me
                    end
                    end
            end


        % Split data into numeric and cell columns.
        rawNumericColumns = raw(:, [1,2]);
        rawCellColumns = raw(:, [3,4]);


        % Replace non-numeric cells with NaN
        R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
        rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

        % Allocate imported array to column variable names
        Subject = cell2mat(rawNumericColumns(:, 1));
        InitLagOnsetTime = cell2mat(rawNumericColumns(:, 2));
        Condition = rawCellColumns(:, 1);
        SDSlideOnsetTime = rawCellColumns(:, 2);
        
        
        end % Ends strcmp if-statement
        
        Subject=Subject(3,:);
        InitLagOnsetTime=InitLagOnsetTime(3:90,:);
        Condition=Condition(3:90,:);
        SDSlideOnsetTime=SDSlideOnsetTime(3:90,:);
        
        % Do Onset Time Stuff? Sure!
        
        SDSlideOnsetTime=str2double(SDSlideOnsetTime);
        minTrigger=SDSlideOnsetTime-InitLagOnsetTime;
        
        remVols=minTrigger-7800; % Subtract 4 volumes from data to account for magnetization effects
        
        % Rest Times
        rest1=remVols(11,1)+3500; % 3500ms after last stimulus presentation
        rest1(:,2)=remVols(17,1)-1;
        rest2=remVols(22,1)+3500;
        rest2(:,2)=remVols(28,1)-1;
        rest3=remVols(33,1)+3500;
        rest3(:,2)=remVols(39,1)-1;
        rest4=remVols(44,1)+3500;
        rest4(:,2)=remVols(50,1)-1;
        rest5=remVols(55,1)+3500;
        rest5(:,2)=remVols(61,1)-1;
        rest6=remVols(66,1)+3500;
        rest6(:,2)=remVols(72,1)-1;
        rest7=remVols(77,1)+3500;
        rest7(:,2)=remVols(83,1)-1;
        rest=[rest1;rest2;rest3;rest4;rest5;rest6;rest7];
        
        % Block Times
        block1=remVols(6,1);
        block1(:,2)=remVols(11,1)+2250;
        block2=remVols(17,1);
        block2(:,2)=remVols(22,1)+2250;
        block3=remVols(28,1);
        block3(:,2)=remVols(33,1)+2250;
        block4=remVols(39,1);
        block4(:,2)=remVols(44,1)+2250;
        block5=remVols(50,1);
        block5(:,2)=remVols(55,1)+2250;
        block6=remVols(61,1);
        block6(:,2)=remVols(66,1)+2250;
        block7=remVols(72,1);
        block7(:,2)=remVols(77,1)+2250;
        block8=remVols(83,1);
        block8(:,2)=remVols(88,1)+2250;
        block=[block1;block2;block3;block4;block5;block6;block7;block8];
        
        % Clear temporary variables
        clearvars block1 block2 block3 block4 block5 block6 block7 block8 rest1 rest2 rest3 rest4 rest5 rest6 rest7 filename delimiter formatSpec fileID dataArray ans raw col row regexstr result numbers invalidThousandsSeparator thousandsRegExp me R rawData rawNumericColumns rawCellColumns numericData;

        
        if pt==1 % 1a presType IF statements to direct block times to correct images seen - Correction: This is the fun part.
            nonFood=[block(1,:);block(3,:);block(5,:);block(7,:)];
            loCal=[block(2,:);block(6,:)];
            hiCal=[block(4,:);block(8,:)];
            
        elseif pt==2 %1b
            nonFood=[block(2,:);block(4,:);block(6,:);block(8,:)];
            loCal=[block(1,:);block(5,:)];
            hiCal=[block(3,:);block(7,:)];
            
        elseif pt==3 %2a
            nonFood=[block(2,:);block(4,:);block(6,:);block(8,:)];
            loCal=[block(3,:);block(7,:)];
            hiCal=[block(1,:);block(5,:)];
            
        elseif pt==4 %2b
            nonFood=[block(1,:);block(3,:);block(5,:);block(7,:)];
            loCal=[block(4,:);block(8,:)];
            hiCal=[block(2,:);block(6,:)];
            
        elseif pt==5 %3a
            nonFood=[block(1,:);block(3,:);block(5,:);block(7,:)];
            loCal=[block(2,:);block(6,:)];
            hiCal=[block(4,:);block(8,:)];
            
        elseif pt==6 %3b
            nonFood=[block(2,:);block(4,:);block(6,:);block(8,:)];
            loCal=[block(1,:);block(5,:)];
            hiCal=[block(3,:);block(7,:)];
            
        elseif pt==7 %4a
            nonFood=[block(2,:);block(4,:);block(6,:);block(8,:)];
            loCal=[block(3,:);block(7,:)];
            hiCal=[block(1,:);block(5,:)];
            
        elseif pt==8 %4b
            nonFood=[block(1,:);block(3,:);block(5,:);block(7,:)];
            loCal=[block(4,:);block(8,:)];
            hiCal=[block(2,:);block(6,:)];
            
        
        end % presType IF statement for storing data
        
        onsetTime=[rest;nonFood;loCal;hiCal];
        onsetTime=num2cell(onsetTime);
        allData{s,t,pt}={subs{s},time{t},presType{pt}};
        
        % Seemes to work so far for sub1001. Reminder that when file {T}
        % and {PT} don't match to check the source file first. I apparently
        % made some mistakes with A's, B's, and numbers.
        
        % Abandon all hope, ye whom enter
        
        
        % Basically, str find works to check for pre/post using logical
        % indexing. I created template files to open, imported them,
        % replaced the appropriate timings, and output the files to the
        % subject behav directory. 
        
        
        % save files that are premeal 1a,1b,2a,2b
        if strfind(subStimSummary{s,t},'Pre')==1 & pt<=4
            
                % Initialize Premeal variables.
                evPath=['/media/andrew/storage/Nock_Reward_Study/Behavioral_Data/RWDR',subs{s},'_',time{t}];
                savPath=['/media/andrew/storage/Nock_Reward_Study/Behavioral_Data/RWDR',subs{s},'_',time{t},'/',subs{s},time{t},'_','premeal','_',presType{pt}];
                filename = '/media/andrew/storage/Nock_Reward_Study/Behavioral_Data/Template_PRT_Files/template_premeal.prt';
                delimiter = ' ';

                formatSpec = '%s%s%s%s%[^\n\r]';

                % Open the text file.
                fileID = fopen(filename,'r');

                dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true,  'ReturnOnError', false);

                % Close the text file.
                fclose(fileID);

                % Create output variable
                templatepremeal = [dataArray{1:end-1}];
                
                % Rest Times
                templatepremeal(13:19,1)=onsetTime(1:7,1);
                templatepremeal(13:19,2)=onsetTime(1:7,2);
                % hiCal Times **Ordered by template information**
                templatepremeal(23:24,1)=onsetTime(14:15,1);
                templatepremeal(23:24,2)=onsetTime(14:15,2);
                % nonFood Times
                templatepremeal(28:31,1)=onsetTime(8:11,1);
                templatepremeal(28:31,2)=onsetTime(8:11,2);
                %loCal Times
                templatepremeal(35:36,1)=onsetTime(12:13,1);
                templatepremeal(35:36,2)=onsetTime(12:13,2);
            
                outputTime=cell2table(templatepremeal);
                
                writetable(outputTime,savPath,'Delimiter',' ','WriteVariableNames',false)
                
                % Create FSL EV's
                
                restEV=rest/1000;
                restEV=[restEV(:,1) restEV(:,2)-restEV(:,1) ones(size(restEV(:,1)))];
                eval(sprintf('save %s/rwdr%s%s_premeal_RestEV_%s.txt restEV -ascii -tabs',evPath,subs{s},time{t},presType{pt}));
                
                nfEV=nonFood/1000;
                nfEV=[nfEV(:,1) nfEV(:,2)-nfEV(:,1) ones(size(nfEV(:,1)))];                
                eval(sprintf('save %s/rwdr%s%s_premeal_NonFoodEV_%s.txt nfEV -ascii -tabs',evPath,subs{s},time{t},presType{pt}));

                hcEV=hiCal/1000;
                hcEV=[hcEV(:,1) hcEV(:,2)-hcEV(:,1) ones(size(hcEV(:,1)))];
                eval(sprintf('save %s/rwdr%s%s_premeal_HighCalEV_%s.txt hcEV -ascii -tabs',evPath,subs{s},time{t},presType{pt}));

                lcEV=loCal/1000;
                lcEV=[lcEV(:,1) lcEV(:,2)-lcEV(:,1) ones(size(lcEV(:,1)))];
                eval(sprintf('save %s/rwdr%s%s_premeal_LowCalEV_%s.txt lcEV -ascii -tabs',evPath,subs{s},time{t},presType{pt}));
                
                % Clear temp variables
                clearvars filename delimiter formatSpec fileID dataArray ans templatepremeal templatepostmeal;
                
            %eval(sprintf('save %s/rwdr%s%s_premeal_%s.txt onsetTime',path,subs{s},time{t},presType{pt}));

        % save files that are postmeal 3a,3b,4a,4b            
        
        elseif strfind(subStimSummary{s,t},'Pre')==1 & pt>=5
        
            % Initialize POSTMEAL variables.
            evPath=['/media/andrew/storage/Nock_Reward_Study/Behavioral_Data/RWDR',subs{s},'_',time{t}];
            savPath=['/media/andrew/storage/Nock_Reward_Study/Behavioral_Data/RWDR',subs{s},'_',time{t},'/',subs{s},time{t},'_','postmeal','_',presType{pt}];
            filename = '/media/andrew/storage/Nock_Reward_Study/Behavioral_Data/Template_PRT_Files/template_postmeal.prt';
            delimiter = ' ';

            formatSpec = '%s%s%s%s%[^\n\r]';

            % Open the text file.
            fileID = fopen(filename,'r');

            dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true,  'ReturnOnError', false);

            % Close the text file.
            fclose(fileID);

            % Create output variable
            templatepostmeal = [dataArray{1:end-1}];
            
            % Rest
            templatepostmeal(13:19,1)=onsetTime(1:7,1);
            templatepostmeal(13:19,2)=onsetTime(1:7,2);
            % hiCal
            templatepostmeal(36:37,1)=onsetTime(14:15,1);
            templatepostmeal(36:37,2)=onsetTime(14:15,2);
            % nonFood
            templatepostmeal(41:44,1)=onsetTime(8:11,1);
            templatepostmeal(41:44,2)=onsetTime(8:11,2);
            % loCal
            templatepostmeal(48:49,1)=onsetTime(12:13,1);
            templatepostmeal(48:49,2)=onsetTime(12:13,2);
            
            outputTime=cell2table(templatepostmeal);
            writetable(outputTime,savPath,'Delimiter',' ','WriteVariableNames',false)
            
            % create FSL EV's
            
            restEV=rest/1000;
            restEV=[restEV(:,1) restEV(:,2)-restEV(:,1) ones(size(restEV(:,1)))];
            eval(sprintf('save %s/rwdr%s%s_postmeal_RestEV_%s.txt restEV -ascii -tabs',evPath,subs{s},time{t},presType{pt}));
                
            nfEV=nonFood/1000;
            nfEV=[nfEV(:,1) nfEV(:,2)-nfEV(:,1) ones(size(nfEV(:,1)))];                
            eval(sprintf('save %s/rwdr%s%s_postmeal_NonFoodEV_%s.txt nfEV -ascii -tabs',evPath,subs{s},time{t},presType{pt}));

            hcEV=hiCal/1000;
            hcEV=[hcEV(:,1) hcEV(:,2)-hcEV(:,1) ones(size(hcEV(:,1)))];
            eval(sprintf('save %s/rwdr%s%s_postmeal_HighCalEV_%s.txt hcEV -ascii -tabs',evPath,subs{s},time{t},presType{pt}));

            lcEV=loCal/1000;
            lcEV=[lcEV(:,1) lcEV(:,2)-lcEV(:,1) ones(size(lcEV(:,1)))];
            eval(sprintf('save %s/rwdr%s%s_postmeal_LowCalEV_%s.txt lcEV -ascii -tabs',evPath,subs{s},time{t},presType{pt}));
            
            % Clear temp variables
            clearvars filename delimiter formatSpec fileID dataArray ans templatepremeal templatepostmeal;
            
            %eval(sprintf('save %s/rwdr%s%s_postmeal_%s.txt onsetTime',path,subs{s},time{t},presType{pt}));
            
        % save files that are postmeal 1a,1b,2a,2b            
        elseif strfind(subStimSummary{s,t},'Post')==1 & pt<=4
            
            % Initialize POSTMEAL variables.
            evPath=['/media/andrew/storage/Nock_Reward_Study/Behavioral_Data/RWDR',subs{s},'_',time{t}];
            savPath=['/media/andrew/storage/Nock_Reward_Study/Behavioral_Data/RWDR',subs{s},'_',time{t},'/',subs{s},time{t},'_','postmeal','_',presType{pt}];
            filename = '/media/andrew/storage/Nock_Reward_Study/Behavioral_Data/Template_PRT_Files/template_postmeal.prt';
            delimiter = ' ';

            formatSpec = '%s%s%s%s%[^\n\r]';

            % Open the text file.
            fileID = fopen(filename,'r');

            dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true,  'ReturnOnError', false);

            % Close the text file.
            fclose(fileID);

            % Create output variable
            templatepostmeal = [dataArray{1:end-1}];            
            
            % Rest
            templatepostmeal(13:19,1)=onsetTime(1:7,1);
            templatepostmeal(13:19,2)=onsetTime(1:7,2);
            % hiCal
            templatepostmeal(36:37,1)=onsetTime(14:15,1);
            templatepostmeal(36:37,2)=onsetTime(14:15,2);
            % nonFood
            templatepostmeal(41:44,1)=onsetTime(8:11,1);
            templatepostmeal(41:44,2)=onsetTime(8:11,2);
            % loCal
            templatepostmeal(48:49,1)=onsetTime(12:13,1);
            templatepostmeal(48:49,2)=onsetTime(12:13,2);
            
            outputTime=cell2table(templatepostmeal);
            writetable(outputTime,savPath,'Delimiter',' ','WriteVariableNames',false)
            
            % Create FSL EV's
            
            restEV=rest/1000;
            restEV=[restEV(:,1) restEV(:,2)-restEV(:,1) ones(size(restEV(:,1)))];
            eval(sprintf('save %s/rwdr%s%s_postmeal_RestEV_%s.txt restEV -ascii -tabs',evPath,subs{s},time{t},presType{pt}));
                
            nfEV=nonFood/1000;
            nfEV=[nfEV(:,1) nfEV(:,2)-nfEV(:,1) ones(size(nfEV(:,1)))];                
            eval(sprintf('save %s/rwdr%s%s_postmeal_NonFoodEV_%s.txt nfEV -ascii -tabs',evPath,subs{s},time{t},presType{pt}));

            hcEV=hiCal/1000;
            hcEV=[hcEV(:,1) hcEV(:,2)-hcEV(:,1) ones(size(hcEV(:,1)))];
            eval(sprintf('save %s/rwdr%s%s_postmeal_HighCalEV_%s.txt hcEV -ascii -tabs',evPath,subs{s},time{t},presType{pt}));

            lcEV=loCal/1000;
            lcEV=[lcEV(:,1) lcEV(:,2)-lcEV(:,1) ones(size(lcEV(:,1)))];
            eval(sprintf('save %s/rwdr%s%s_postmeal_LowCalEV_%s.txt lcEV -ascii -tabs',evPath,subs{s},time{t},presType{pt}));
            
            % Clear temp variables
            clearvars filename delimiter formatSpec fileID dataArray ans templatepremeal templatepostmeal;
            
            
            %eval(sprintf('save %s/rwdr%s%s_postmeal_%s.txt onsetTime',path,subs{s},time{t},presType{pt}));            
            
            
        % save files that are premeal 3a,3b,4a,4b
        elseif strfind(subStimSummary{s,t},'Post')==1 & pt>=5
            
                % Initialize PREMEAL variables.
                evPath=['/media/andrew/storage/Nock_Reward_Study/Behavioral_Data/RWDR',subs{s},'_',time{t}];
                savPath=['/media/andrew/storage/Nock_Reward_Study/Behavioral_Data/RWDR',subs{s},'_',time{t},'/',subs{s},time{t},'_','premeal','_',presType{pt}];
                filename = '/media/andrew/storage/Nock_Reward_Study/Behavioral_Data/Template_PRT_Files/template_premeal.prt';
                delimiter = ' ';

                formatSpec = '%s%s%s%s%[^\n\r]';

                % Open the PREMEAL file.
                fileID = fopen(filename,'r');

                dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true,  'ReturnOnError', false);

                % Close the text file.
                fclose(fileID);

                % Create output variable
                templatepremeal = [dataArray{1:end-1}];
                
                % Rest Times
                templatepremeal(13:19,1)=onsetTime(1:7,1);
                templatepremeal(13:19,2)=onsetTime(1:7,2);
                % hiCal Times **Ordered by template information**
                templatepremeal(23:24,1)=onsetTime(14:15,1);
                templatepremeal(23:24,2)=onsetTime(14:15,2);
                % nonFood Times
                templatepremeal(28:31,1)=onsetTime(8:11,1);
                templatepremeal(28:31,2)=onsetTime(8:11,2);
                %loCal Times
                templatepremeal(35:36,1)=onsetTime(12:13,1);
                templatepremeal(35:36,2)=onsetTime(12:13,2);
                
                outputTime=cell2table(templatepremeal);
                writetable(outputTime,savPath,'Delimiter',' ','WriteVariableNames',false)
                
                % Create FSL EV's
                
                restEV=rest/1000;
                restEV=[restEV(:,1) restEV(:,2)-restEV(:,1) ones(size(restEV(:,1)))];
                eval(sprintf('save %s/rwdr%s%s_premeal_RestEV_%s.txt restEV -ascii -tabs',evPath,subs{s},time{t},presType{pt}));
                
                nfEV=nonFood/1000;
                nfEV=[nfEV(:,1) nfEV(:,2)-nfEV(:,1) ones(size(nfEV(:,1)))];                
                eval(sprintf('save %s/rwdr%s%s_premeal_NonFoodEV_%s.txt nfEV -ascii -tabs',evPath,subs{s},time{t},presType{pt}));

                hcEV=hiCal/1000;
                hcEV=[hcEV(:,1) hcEV(:,2)-hcEV(:,1) ones(size(hcEV(:,1)))];
                eval(sprintf('save %s/rwdr%s%s_premeal_HighCalEV_%s.txt hcEV -ascii -tabs',evPath,subs{s},time{t},presType{pt}));

                lcEV=loCal/1000;
                lcEV=[lcEV(:,1) lcEV(:,2)-lcEV(:,1) ones(size(lcEV(:,1)))];
                eval(sprintf('save %s/rwdr%s%s_premeal_LowCalEV_%s.txt lcEV -ascii -tabs',evPath,subs{s},time{t},presType{pt}));
                 
                
                % Clear temporary variables
                clearvars filename delimiter formatSpec fileID dataArray ans templatepremeal templatepostmeal;
            
            
            %eval(sprintf('save %s/rwdr%s%s_premeal_%s.txt onsetTime',path,subs{s},time{t},presType{pt}));
        
        end

    
        else % File uses different presType
            
        continue
                
        end
                
        
        end
    end
end

% key
onsetTimeKey={'7 rows of Rest, 4 rows of nonFood, 2 rows of loCal, 2 rows of hiCal'};